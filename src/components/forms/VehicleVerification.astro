---
---
<div class="bg-white rounded-lg shadow">
  <div class="p-6">
    <div class="flex items-center gap-2 mb-3">
      <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
      <h2 class="text-lg font-semibold">Verificaci√≥n de Veh√≠culos</h2>
    </div>
   
    
    <div class="space-y-4">
      <div class="flex gap-2">
        <input 
          type="text" 
          id="searchPlaca"
          placeholder="ABC123" 
          class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <button 
          id="verifyBtn"
          class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <span id="verifyBtnText">Verificar</span>
        </button>
        <button 
          id="scanBtn"
          class="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 flex items-center gap-2"
        >
          <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
          </svg>
          Escanear
        </button>
      </div>

      <div id="searchResult" class="hidden"></div>
    </div>
  </div>
</div>

<script>
  // Configuraci√≥n de la API
  const API_BASE_URL = 'https://xpz21v8w-8000.use2.devtunnels.ms/api';

  // Funcionalidad de verificaci√≥n de veh√≠culos
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchPlaca');
    const verifyBtn = document.getElementById('verifyBtn');
    const verifyBtnText = document.getElementById('verifyBtnText');
    const scanBtn = document.getElementById('scanBtn');
    const searchResult = document.getElementById('searchResult');

    // Formatear moneda
    function formatCurrency(amount) {
      return new Intl.NumberFormat('es-CO', {
        style: 'currency',
        currency: 'COP',
        minimumFractionDigits: 0
      }).format(amount);
    }

    // Calcular tiempo transcurrido
    function calcularTiempoTranscurrido(fechaIngreso, horaIngreso) {
      const now = new Date();
      const ingreso = new Date(`${fechaIngreso}T${horaIngreso}`);
      const tiempoEnMinutos = Math.floor((now.getTime() - ingreso.getTime()) / (1000 * 60));

      const horas = Math.floor(tiempoEnMinutos / 60);
      const minutos = tiempoEnMinutos % 60;

      if (horas === 0) {
        return `${minutos} minutos`;
      } else if (minutos === 0) {
        return `${horas} hora${horas > 1 ? 's' : ''}`;
      } else {
        return `${horas} hora${horas > 1 ? 's' : ''} y ${minutos} minutos`;
      }
    }

    // Verificar si veh√≠culo existe usando el endpoint de salida (simulaci√≥n)
    async function verificarVehiculo(placa) {
      try {
        // Como no tienes endpoint de b√∫squeda, simularemos con datos b√°sicos
        // En un escenario real, podr√≠as usar un endpoint como /api/vehicule/check/{placa}
        return {
          placa: placa,
          encontrado: true,
          mensaje: 'Veh√≠culo encontrado en el sistema'
        };
      } catch (error) {
        console.error('Error al verificar veh√≠culo:', error);
        throw error;
      }
    }

    // Registrar salida del veh√≠culo (API)
    async function registrarSalida(placa) {
      try {
        const response = await fetch(`${API_BASE_URL}/vehicule/register_exit/`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ placa: placa })
        });

        if (!response.ok) {
          const errorData = await response.json().catch(() => null);
          throw new Error(errorData?.detail || `Error del servidor: ${response.status}`);
        }

        return await response.json();
      } catch (error) {
        console.error('Error al registrar salida:', error);
        throw error;
      }
    }

    // Mostrar resultado de verificaci√≥n
    function showSearchResult(vehicleData, isError = false, errorMessage = '') {
      if (isError) {
        searchResult.innerHTML = `
          <div class="border border-red-200 bg-red-50 rounded-md p-4">
            <div class="flex items-center gap-2">
              <svg class="h-4 w-4 text-red-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
              </svg>
              <p class="text-red-800">‚ùå ${errorMessage || 'Error al verificar el veh√≠culo'}</p>
            </div>
          </div>
        `;
      } else if (vehicleData && vehicleData.encontrado) {
        searchResult.innerHTML = `
          <div class="border border-blue-200 bg-blue-50 rounded-md p-4">
            <div class="flex items-start gap-2">
              <svg class="h-4 w-4 text-blue-600 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
              </svg>
              <div class="flex-1">
                <p class="font-medium text-blue-800 mb-2">üîç Placa encontrada</p>
                <div class="text-sm text-blue-700 space-y-1 mb-3">
                  <p><span class="font-medium">Placa:</span> ${vehicleData.placa}</p>
                  <p class="text-xs text-blue-600">${vehicleData.mensaje}</p>
                </div>
                
                <div class="bg-white p-3 rounded-md border border-blue-200 mb-3">
                  <p class="font-medium text-blue-800 mb-1">‚ÑπÔ∏è Informaci√≥n</p>
                  <p class="text-sm text-blue-700">Al registrar la salida, se calcular√° autom√°ticamente el monto a pagar seg√∫n el tiempo de estad√≠a.</p>
                </div>
                
                <button onclick="handleExit('${vehicleData.placa}')" class="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                  üí≥ Proceder con Registro de Salida
                </button>
              </div>
            </div>
          </div>
        `;
      }
      
      searchResult.classList.remove('hidden');
      setTimeout(() => {
        searchResult.classList.add('hidden');
      }, 12000);
    }

    // Manejar verificaci√≥n
    async function handleSearch() {
      const placa = searchInput.value.trim().toUpperCase();
      if (!placa) {
        alert('Por favor ingresa una placa');
        return;
      }

      // Deshabilitar bot√≥n y mostrar estado de carga
      verifyBtn.disabled = true;
      verifyBtnText.textContent = 'Verificando...';

      try {
        const vehicleData = await verificarVehiculo(placa);
        showSearchResult(vehicleData);
      } catch (error) {
        showSearchResult(null, true, `Error al verificar el veh√≠culo: ${error.message}`);
      } finally {
        // Rehabilitar bot√≥n
        verifyBtn.disabled = false;
        verifyBtnText.textContent = 'Verificar';
      }
    }

    // Manejar escaneo (simulaci√≥n)
    function handleScan() {
      // Simular un escaneo con placas comunes de prueba
      const placasPrueba = ['ABC123', 'XYZ789', 'DEF456', 'GHI012', 'JKL345'];
      const placaAleatoria = placasPrueba[Math.floor(Math.random() * placasPrueba.length)];
      
      searchInput.value = placaAleatoria;
      handleSearch();
    }

    // Event listeners
    verifyBtn.addEventListener('click', handleSearch);
    scanBtn.addEventListener('click', handleScan);
    
    searchInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        handleSearch();
      }
    });
    
    searchInput.addEventListener('input', function(e) {
      e.target.value = e.target.value.toUpperCase();
    });

    // Funci√≥n global para manejar salida
    window.handleExit = async function(placa) {
      const confirmExit = confirm(`¬øConfirmas el registro de salida del veh√≠culo ${placa}?`);
      if (!confirmExit) return;

      try {
        // Mostrar estado de carga en el bot√≥n
        const exitButton = document.querySelector(`button[onclick="handleExit('${placa}')"]`);
        if (exitButton) {
          exitButton.disabled = true;
          exitButton.innerHTML = '‚è≥ Procesando salida...';
        }

        const result = await registrarSalida(placa);
        
        // Ocultar resultado y limpiar b√∫squeda
        searchResult.classList.add('hidden');
        searchInput.value = '';
        
        // Mostrar mensaje de √©xito
        if (result.valor_pagado) {
          alert(`‚úÖ ${result.detail}\nTotal pagado: ${formatCurrency(result.valor_pagado)}\nFecha de salida: ${result.fecha_salida}`);
        } else {
          alert(`‚úÖ ${result.detail || 'Salida registrada correctamente'}`);
        }
        
        // Actualizar estad√≠sticas si existe la funci√≥n
        if (window.updateStats) {
          window.updateStats();
        }
        
      } catch (error) {
        alert(`‚ùå Error al registrar la salida: ${error.message}`);
        console.error('Error:', error);
      }
    };
  });
</script>